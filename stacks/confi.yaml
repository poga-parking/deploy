version: "3.8"

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "" # put url

x-deploy: &deploy_cons
  placement:
      constraints:
          - node.role != manager
          - node.labels.monitoring == true
  replicas: 1
  restart_policy:
        condition: on-failure

services:
  grafana:
    image: # -- put image
    <<: *logging
    deploy: *deploy_cons
    ports:
      - target: 3000
        published: ${GRAFANA_PORT}
        protocol: tcp
        mode: ingress
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - poganet # change 

  prometheus:
    <<: *logging
    ports:
      - target: 9090
        published: ${PROMETHEUS_PORT}
        protocol: tcp
        mode: ingress
    image: # put image
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=error'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
    deploy: *deploy_cons
    volumes:
      - type: volume
        source: prometheus-data
        target: /prometheus
    networks:
      - poganet
    configs:
      - source: prometheus_conf
        target: /etc/prometheus/prometheus.yml
      - source: alertmanager_rules
        target: /etc/prometheus/alertmanager-rules.yml

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    <<: *logging
    command: -logtostderr -docker_only
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: true
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: true
      - type: bind
        source: /dev/disk
        target: /dev/disk
        read_only: true
    networks:
      - poganet

  node-exporter:
    image: prom/node-exporter:v1.5.0
    <<: *logging
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
    networks:
      - poganet

alertmanager:
    image: prom/alertmanager:v0.26.0
    <<: *logging
    user: root
    ports:
      - target: 9093
        published: 9093
        protocol: tcp
        mode: ingress
    deploy: *deploy_cons
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/etc/alertmanager/data'
    configs:
      - source: alertmanager_conf
        target: /etc/alertmanager/config.yml
    networks:
      - poganet
  
  log-generator:
    image: mingrammer/flog
    <<: *logging
    deploy:
      replicas: 1
      restart_policy:
          condition: none
    command:
      - --loop
      - --format=json
      - --number=10 # number of log lines to generate per second
      - --delay=100ms # delay between log lines
      - --output=/dev/stdout # var/log/generated-logs.txt
      - --overwrite
      - --type=log
    networks:
      - poganet

volumes:
  grafana-data:  ## WARNING! No NFS, node-specific volume
  prometheus-data:  ## WARNING! No NFS, node-specific volume
  alertmanager-bot-data:  ## WARNING! No NFS, node-specific volume

networks:
  poganet:
    external: true

configs:
  prometheus_conf:
    external:
      name: prometheus_config
  alertmanager_conf:
    external:
      name: alertmanager_config
  alertmanager_rules:
    external:
      name: alertmanager_rules
